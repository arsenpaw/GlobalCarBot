import logging, os
import sqlite3

from aiogram.types import *
from aiogram.types import Message, InputFile, FSInputFile
from aiogram import Bot, Dispatcher, F, Router

from Handlers.base_handlers import *
from keyboards import *
from aiogram.fsm.context import FSMContext
from utils.states import *
from database.database_methods import *
from methods.user_filter_to_db import *
from filters.admin_filters import *

router = Router()
router.message.filter(ChatTypeFilter(["private"]))


@router.message(F.text.lower() == '–≤–∞—Ä—Ç—ñ—Å—Ç—å –ø—ñ–¥ –∫–ª—é—á')
async def estimated_cost_handler(message: Message, state: FSMContext) -> None:
    logging.info("/estimated cose")
    await state.set_state(BotStates.user_car_info)
    await message.answer(f"–ú–∏ –∑—Ä–æ–±–∏–º–æ –¥–ª—è –≤–∞—Å —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –ø—ñ–¥ –∫–ª—é—á –≤ –£–∫—Ä–∞—ó–Ω—ñüá∫üá¶ \n "
                         f"<b>–ù–∞–ø–∏—à—ñ—Ç—å, —è–∫–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—åüöò</b>\n"
                         f" –¶–µ –º–æ–∂–µ –±—É—Ç–∏: \n\n"
                         f"- <b>–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å —Ç–∞ —Ä—ñ–∫\n \n"
                         f"- –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ª–æ—Ç –Ω–∞ –∞—É–∫—Ü—ñ–æ–Ω—ñ\n \n"
                         f"- —Ç–æ—â–æ</b>",
                         reply_markup=start_keyboard.consult_and_main_kb)


@router.message(BotStates.user_car_info, F.text == '–∑–≤—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º')
async def wait_connect_to_manager(message: Message, state: FSMContext) -> None:
    await state.set_state(BotStates.contact_with_manager)


@router.message(BotStates.user_car_info)
async def wait_data_input(message: Message, state: FSMContext) -> None:
    logging.info("User input")
    await state.update_data(user_car_info=message.text)
    logging.info(message.contact)
    if message.contact is not None:
        await connect_to_manager(message, state)
    else:
        await message.answer(f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
        await state.set_state(BotStates.contact_to_user_about_info)
        await message.answer(f"–©–æ–± –æ—Ç—Ä–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ –¥–∞–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—é "
                             f"\n –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Ä–∞—Ö—É–Ω–æ–∫' a–±–æ –∑–≤—è–∂—ñ—Ç—å—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
                             reply_markup=estimated_cost_keyboards.individual_cost_kb)


@router.message(BotStates.contact_to_user_about_info)
async def after_data_provided(message: Message, state: FSMContext) -> None:
    logging.info('after_data_provided')
    try:
        dict_car = await state.get_data()
        car = ''.join(str(value) for value in dict_car.values())
        logging.info(f'Selected car {car}')
        dict_user_info = await get_basic_info(message)
    except Exception as ex:
        logging.error(f'ERROR IN PARSING 1 BUTTON, {ex}')
    try:
        with sqlite3.connect("database/clients.db") as db:
            cur = db.cursor()
            query = (""" INSERT INTO CertainCar
                (client_id,client_name,car_to_find,client_phone,time)
                VALUES (?, ?, ?,?,?)
                """)
            values = (dict_user_info['user_id'], dict_user_info['user_name'], car, dict_user_info['phone_number'],
                      dict_user_info['time'])
            cur.execute(query, values)
            db.commit()
    except Exception as ex:
        logging.error(f'ERROR IN FIRST BUTTON  DB, {ex}')
    finally:
        result = await is_object_added(cur)
        await send_status_to_user(message, result)
        await message.answer(text='–í–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', reply_markup=start_keyboard.back_bome_kb)
